#!/usr/bin/env node
/**
 * Elux Framework - Route Builder Script
 * Scans the app directory and generates a routes.ts file automatically
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { generateRouteMap } from "./core/routeBuilder";

// Get directory paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const appDir = process.env.APP_DIR || path.resolve(process.cwd(), "app");

// Check for quiet mode
const isQuietMode =
  process.argv.includes("--quiet") || process.argv.includes("-q");

// Custom logger that respects quiet mode
const log = {
  info: (...args: unknown[]) => {
    if (!isQuietMode) console.log(...args);
  },
  error: (...args: unknown[]) => console.error(...args), // Always show errors
};

// Function to generate the routes file
async function generateRoutesFile() {
  try {
    log.info(`Scanning directory: ${appDir}`);

    // Generate route map using our routeBuilder
    const routeMap = generateRouteMap(appDir);

    // Ensure we have the notfound route
    if (!routeMap["/notfound"]) {
      log.info(`Adding missing /notfound route`);
      routeMap["/notfound"] = () => import("../app/notfound");
    }

    // Create routes.ts content
    let routesContent = `/**
 * This file is auto-generated - DO NOT EDIT MANUALLY
 * Generated by elux/build-routes.ts
 */

/**
 * Application Routes
 * Auto-generated based on file system structure
 */

// Routes definition - maps URL paths to component loaders
export const routes = {
`;

    // Add each route with path import
    Object.keys(routeMap).forEach((route) => {
      // Format route properly for JS
      const routeKey = route === "/" ? "/" : `${route}`;

      // Get the component path based on route
      let componentPath =
        route === "/"
          ? "../app/page"
          : route === "/notfound"
          ? "../app/notfound"
          : `../app${route}/page`;

      // Normalize path for Windows
      componentPath = componentPath.replace(/\\/g, "/");

      // Add to routes object
      routesContent += `  "${routeKey}": () => import("${componentPath}"),\n`;
    });

    // Close the routes object
    routesContent += `};

// Default export
export default routes;
`;

    // Write the routes.ts file
    const outputPath = path.resolve(__dirname, "routes.ts");
    fs.writeFileSync(outputPath, routesContent, "utf8");

    log.info(`✅ Routes generated successfully: ${outputPath}`);
    log.info(`Found ${Object.keys(routeMap).length} routes:`);
    Object.keys(routeMap).forEach((route) => {
      log.info(`  ${route}`);
    });
  } catch (error) {
    log.error("❌ Error generating routes file:", error);
    process.exit(1);
  }
}

// Execute the script
generateRoutesFile();
